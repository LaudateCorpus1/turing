{"version":3,"file":"room.js","sources":["../src/room.js"],"sourcesContent":["'use strict'\n\n/**\n * Creates a new http client to a roomdb instance\n *\n * @param {uri} location Location to connect (defaults to localhost:3000)\n */\nimport fetch from 'node-fetch'\n//import io from 'socket.io-client'\n\nfunction getEnv (key) {\n  if (typeof process !== 'undefined') return process.env[key]\n}\n\nexport default class Room {\n  constructor (uri) {\n    this.uri = uri || getEnv('ROOMDB_URI') || 'http://localhost:3000'\n    this._subscriptions = new Map()\n    this._data = null\n    this._endpoint = null\n  }\n\n/*\n  subscribe (facts) {\n    const subscriptionName = facts.toString()\n    if (this._sockets.has(subscriptionName)) return this._sockets.get(subscriptionName)\n    const subscription = io\n      .of(`/${subscriptionName}`)\n      .on('connection', socket => {\n        socket.emit('subscribe', facts)\n      })\n    this._sockets.set(subscriptionName, subscription)\n    return {\n      on(callback) {\n        subscription.on('subscriptionFacts', cb)\n      }\n    }\n  }\n  */\n\n  _db () {\n    if (!(this._data || this._endpoint)) {\n      throw new Error(`please set _data and _endpoint using assert(), retract(), select(), or do()`)\n    }\n    const endpoint = this.uri + '/' + this._endpoint\n\n    const post = {\n      method: 'POST',\n      body: JSON.stringify(this._data),\n      headers: { 'Content-Type': 'application/json' }\n    }\n\n    return fetch(endpoint, post)\n      .then(response => {\n        this._data = null\n        this._endpoint = null\n        return response\n      })\n  }\n\n  select (facts) {\n    this._data = {facts}\n    this._endpoint = 'select'\n    return this\n  }\n\n  async do (callbackFn) {\n    const {solutions} = await this._db().then(_ => _.json())\n    solutions.forEach(callbackFn)\n  }\n\n  async doAll (callbackFn) {\n    const {solutions} = await this._db().then(_ => _.json())\n    callbackFn(solutions)\n  }\n\n  // todo: implement filler values\n  assert (fact, _) {\n    this._data = {fact}\n    this._endpoint = 'assert'\n    this._db()\n    return this\n  }\n\n  // todo: implement filler values\n  retract (fact, _) {\n    this._data = {fact}\n    this._endpoint = 'retract'\n    this._db()\n    return this\n  }\n}\n"],"names":[],"mappings":";;;;;;;;AAEA;;;;;AAKA,AACA;;AAEA,SAAS,MAAM,EAAE,GAAG,EAAE;EACpB,IAAI,OAAO,OAAO,KAAK,WAAW,EAAE,OAAO,OAAO,CAAC,GAAG,CAAC,GAAG,CAAC;CAC5D;;AAED,AAAe,MAAM,IAAI,CAAC;EACxB,WAAW,CAAC,CAAC,GAAG,EAAE;IAChB,IAAI,CAAC,GAAG,GAAG,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,IAAI,wBAAuB;IACjE,IAAI,CAAC,cAAc,GAAG,IAAI,GAAG,GAAE;IAC/B,IAAI,CAAC,KAAK,GAAG,KAAI;IACjB,IAAI,CAAC,SAAS,GAAG,KAAI;GACtB;;;;;;;;;;;;;;;;;;;;EAoBD,GAAG,CAAC,GAAG;IACL,IAAI,EAAE,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,SAAS,CAAC,EAAE;MACnC,MAAM,IAAI,KAAK,CAAC,CAAC,2EAA2E,CAAC,CAAC;KAC/F;IACD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,UAAS;;IAEhD,MAAM,IAAI,GAAG;MACX,MAAM,EAAE,MAAM;MACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC;MAChC,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;MAChD;;IAED,OAAO,KAAK,CAAC,QAAQ,EAAE,IAAI,CAAC;OACzB,IAAI,CAAC,QAAQ,IAAI;QAChB,IAAI,CAAC,KAAK,GAAG,KAAI;QACjB,IAAI,CAAC,SAAS,GAAG,KAAI;QACrB,OAAO,QAAQ;OAChB,CAAC;GACL;;EAED,MAAM,CAAC,CAAC,KAAK,EAAE;IACb,IAAI,CAAC,KAAK,GAAG,CAAC,KAAK,EAAC;IACpB,IAAI,CAAC,SAAS,GAAG,SAAQ;IACzB,OAAO,IAAI;GACZ;;EAED,MAAM,EAAE,CAAC,CAAC,UAAU,EAAE;IACpB,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAC;IACxD,SAAS,CAAC,OAAO,CAAC,UAAU,EAAC;GAC9B;;EAED,MAAM,KAAK,CAAC,CAAC,UAAU,EAAE;IACvB,MAAM,CAAC,SAAS,CAAC,GAAG,MAAM,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAC;IACxD,UAAU,CAAC,SAAS,EAAC;GACtB;;;EAGD,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE;IACf,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,EAAC;IACnB,IAAI,CAAC,SAAS,GAAG,SAAQ;IACzB,IAAI,CAAC,GAAG,GAAE;IACV,OAAO,IAAI;GACZ;;;EAGD,OAAO,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE;IAChB,IAAI,CAAC,KAAK,GAAG,CAAC,IAAI,EAAC;IACnB,IAAI,CAAC,SAAS,GAAG,UAAS;IAC1B,IAAI,CAAC,GAAG,GAAE;IACV,OAAO,IAAI;GACZ;CACF;;;;;;;;"}